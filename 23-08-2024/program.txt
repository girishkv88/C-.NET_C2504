1.matrix Multiplication

using System;

class MatrixMultiplication
{
    static void Main()
    {
        // Define the sizes of the matrices
        int rowsA = 2, columnsA = 3;
        int rowsB = 3, columnsB = 2;

        // Initialize the two matrices
        int[,] matrixA = new int[rowsA, columnsA] 
        {
            {1, 2, 3},
            {4, 5, 6}
        };

        int[,] matrixB = new int[rowsB, columnsB] 
        {
            {7, 8},
            {9, 10},
            {11, 12}
        };

        // Initialize the result matrix
        int[,] resultMatrix = new int[rowsA, columnsB];

        // Perform matrix multiplication
        for (int i = 0; i < rowsA; i++)
        {
            for (int j = 0; j < columnsB; j++)
            {
                resultMatrix[i, j] = 0; // Initialize the result cell to zero
                for (int k = 0; k < columnsA; k++)
                {
                    resultMatrix[i, j] += matrixA[i, k] * matrixB[k, j];
                }
            }
        }

        // Display the result
        Console.WriteLine("Matrix A:");
        PrintMatrix(matrixA, rowsA, columnsA);

        Console.WriteLine("Matrix B:");
        PrintMatrix(matrixB, rowsB, columnsB);

        Console.WriteLine("Result of Matrix Multiplication:");
        PrintMatrix(resultMatrix, rowsA, columnsB);
    }

    // Method to print a matrix
    static void PrintMatrix(int[,] matrix, int rows, int columns)
    {
        for (int i = 0; i < rows; i++)
        {
            for (int j = 0; j < columns; j++)
            {
                Console.Write(matrix[i, j] + "\t");
            }
            Console.WriteLine();
        }
    }
}



2. 
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Runtime;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using System.Xml.Linq;
using Calculator;
using LearnCSharp.Interfaces;

namespace LearnCSharp
{
    class Country
    {
        public string Name { get; set; }
        public string Code { get; set; }
    }
    class Address
    {
        public enum AddressTypes
        {
            Home,
            Office
        }

        public AddressTypes AddressType { get; set; }
        public string FullAddress { get; set; }
        public Country Country { get; set; }
    }

    class Experience
    {
        public string CompanyName { get; set; }
        public string Website { get; set; }
        public string Address { get; set; }
        public double ExperienceInYears { get; set; }
    }

    class Employee
    {
        public string Name { get; set; }
        public string Email { get; set; }
        public long[] PhoneNumbers { get; set; }
        public Address[] Addresses { get; set; }
        public Experience[] Experiences { get; set; }
    }

    internal class Program
    {
        public static void Main()
        {
            var emp = new Employee
            {
                Name = "Employee 1",
                Email = "employee1@mail.com",
                PhoneNumbers = new long[] { 9087656434, 9978654345 },
                Addresses = new Address[]
                {
                    new Address
                    {
                        AddressType = Address.AddressTypes.Home,
                        FullAddress = "sdkfhghsjf",
                        Country = new Country{Name = "India", Code = "IN"}
                    },
                    new Address
                    {
                        AddressType = Address.AddressTypes.Office,
                        FullAddress = "asdkjsdhfsdfh",
                        Country = new Country{Name = "India", Code = "IN"}
                    },
                },
            };
            emp.Experiences = new Experience[1];
            emp.Experiences[0] = new Experience
            {
                CompanyName = "Company X",
                Website = "https://demowebsite.com",
                Address = "ahsdhjgahjd",
                ExperienceInYears = 2
            };

            //Console.WriteLine(emp.Addresses[0].AddressType);
            //Console.WriteLine(emp.Addresses[1].AddressType);

            //for (int i = 0; i < emp.Addresses.Length; i++)
            //{
            //    Console.WriteLine(emp.Addresses[i].AddressType);
            //}

            foreach (var address in emp.Addresses)
            {
                Console.WriteLine((int)address.AddressType);
            }
        }
    }
}
