ASSIGNMENT

1. Implement an Abstract Class with Method Overriding
   - Task: Create an abstract class `Employee` with an abstract method `CalculateSalary()`. Derive two classes `FullTimeEmployee` and `PartTimeEmployee` from `Employee`.
   - Requirements:
     - `FullTimeEmployee` should have properties `BaseSalary` and `BonusPercentage`. Implement the `CalculateSalary()` method to return the total salary, including bonus.
     - `PartTimeEmployee` should have properties `HourlyRate` and `HoursWorked`. Implement the `CalculateSalary()` method to return the total earnings based on hours worked.
   - Example:
     ```csharp
     Employee fullTime = new FullTimeEmployee(50000, 0.1); 
     Console.WriteLine(fullTime.CalculateSalary());  // Output: 55000

     Employee partTime = new PartTimeEmployee(20, 80); 
     Console.WriteLine(partTime.CalculateSalary());  // Output: 1600



using System;

abstract class Employee
{
    public abstract decimal CalculateSalary();
}

class FullTimeEmployee : Employee
{
    public decimal BaseSalary { get; set; }
    public decimal BonusPercentage { get; set; }

    public FullTimeEmployee(decimal baseSalary, decimal bonusPercentage)
    {
        BaseSalary = baseSalary;
        BonusPercentage = bonusPercentage;
    }

    public override decimal CalculateSalary()
    {
        return BaseSalary + (BaseSalary * BonusPercentage);
    }
}

class PartTimeEmployee : Employee
{
    public decimal HourlyRate { get; set; }
    public int HoursWorked { get; set; }

    public PartTimeEmployee(decimal hourlyRate, int hoursWorked)
    {
        HourlyRate = hourlyRate;
        HoursWorked = hoursWorked;
    }

    public override decimal CalculateSalary()
    {
        return HourlyRate * HoursWorked;
    }
}

class Program
{
    static void Main()
    {
        Employee fullTime = new FullTimeEmployee(50000, 0.1m);
        Console.WriteLine(fullTime.CalculateSalary());  // Output: 55000

        Employee partTime = new PartTimeEmployee(20, 80);
        Console.WriteLine(partTime.CalculateSalary());  // Output: 1600
    }
}

----------------------------------------------------------------------------------------------------------------------------------------


2. Design a Class Hierarchy with Interfaces
   - Task: Create an interface `IDrawable` with a method `Draw()`. Create a base class `Graphic` that implements `IDrawable` and has a method `Resize()`. Derive two classes `Line` and `Polygon` from `Graphic`.
   - Requirements:
     - `Line` should have properties `StartPoint` and `EndPoint`. Implement the `Draw()` method to draw a line.
     - `Polygon` should have a property `Vertices` (a list of points). Implement the `Draw()` method to draw a polygon.
     - Implement the `Resize()` method in both derived classes to adjust their dimensions.
   - Example:
     ```csharp
     IDrawable line = new Line(new Point(0, 0), new Point(10, 10));
     line.Draw(); // Draws a line from (0,0) to (10,10)

     Graphic polygon = new Polygon(new List<Point> { new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10) });
     polygon.Resize(2); // Resize polygon
     polygon.Draw(); // Draws the resized polygon



using System;
using System.Collections.Generic;

interface IDrawable
{
    void Draw();
}

abstract class Graphic : IDrawable
{
    public abstract void Draw();

    public void Resize(double scaleFactor)
    {
        // Implement resizing logic if needed
    }
}

class Line : Graphic
{
    public Point StartPoint { get; set; }
    public Point EndPoint { get; set; }

    public Line(Point startPoint, Point endPoint)
    {
        StartPoint = startPoint;
        EndPoint = endPoint;
    }

    public override void Draw()
    {
        Console.WriteLine($"Drawing line from {StartPoint} to {EndPoint}");
    }
}

class Polygon : Graphic
{
    public List<Point> Vertices { get; set; }

    public Polygon(List<Point> vertices)
    {
        Vertices = vertices;
    }

    public override void Draw()
    {
        Console.WriteLine("Drawing polygon with vertices:");
        foreach (var vertex in Vertices)
        {
            Console.WriteLine(vertex);
        }
    }
}

class Point
{
    public int X { get; set; }
    public int Y { get; set; }

    public Point(int x, int y)
    {
        X = x;
        Y = y;
    }

    public override string ToString()
    {
        return $"({X}, {Y})";
    }
}

class Program
{
    static void Main()
    {
        IDrawable line = new Line(new Point(0, 0), new Point(10, 10));
        line.Draw(); // Output: Drawing line from (0,0) to (10,10)

        Graphic polygon = new Polygon(new List<Point> { new Point(0, 0), new Point(10, 0), new Point(10, 10), new Point(0, 10) });
        polygon.Resize(2); // Resize polygon (method can be implemented)
        polygon.Draw(); // Output: Drawing polygon with vertices: (0,0) (10,0) (10,10) (0,10)
    }
}
-----------------------------------------------------------------------------------------------------------------------------------------  ```

3. Create an Abstract Base Class with a Template Method
   - Task: Implement an abstract class `Report` with a method `GenerateReport()` that calls two methods `CreateHeader()` and `CreateBody()`. Derive classes `AnnualReport` and `MonthlyReport` from `Report`.
   - Requirements:
     - `AnnualReport` should override `CreateHeader()` and `CreateBody()` to provide a header and body for an annual report.
     - `MonthlyReport` should override `CreateHeader()` and `CreateBody()` to provide a header and body for a monthly report.
   - Example:
     ```csharp
     Report annual = new AnnualReport();
     annual.GenerateReport(); // Output: Annual report header and body

     Report monthly = new MonthlyReport();
     monthly.GenerateReport(); // Output: Monthly report header and body
     ```


using System;

abstract class Report
{
    public void GenerateReport()
    {
        CreateHeader();
        CreateBody();
        CreateFooter();
    }

    protected abstract void CreateHeader();
    protected abstract void CreateBody();
    protected virtual void CreateFooter()
    {
        Console.WriteLine("Creating footer...");
    }
}

class AnnualReport : Report
{
    protected override void CreateHeader()
    {
        Console.WriteLine("Creating annual report header...");
    }

    protected override void CreateBody()
    {
        Console.WriteLine("Creating annual report body...");
    }
}

class MonthlyReport : Report
{
    protected override void CreateHeader()
    {
        Console.WriteLine("Creating monthly report header...");
    }

    protected override void CreateBody()
    {
        Console.WriteLine("Creating monthly report body...");
    }
}

class Program
{
    static void Main()
    {
        Report annual = new AnnualReport();
        annual.GenerateReport(); 
        // Output: Creating annual report header...
        //         Creating annual report body...
        //         Creating footer...

        Report monthly = new MonthlyReport();
        monthly.GenerateReport(); 
        // Output: Creating monthly report header...
        //         Creating monthly report body...
        //         Creating footer...
    }
}
----------------------------------------------------------------------------------------------------------------------------------------

4. Design a Class Hierarchy with Abstract Methods and Interfaces
   - Task: Create an abstract class `Vehicle` with an abstract method `Drive()`. Create an interface `IFuel` with a method `Refuel()`. Derive classes `Car` and `Motorcycle` from `Vehicle` and implement `IFuel`.
   - Requirements:
     - `Car` should have properties `FuelLevel` and `TankCapacity`. Implement the `Drive()` method to simulate driving and `Refuel()` to refill the tank.
     - `Motorcycle` should have properties `FuelLevel` and `TankCapacity`. Implement the `Drive()` method to simulate driving and `Refuel()` to refill the tank.
   - Example:
     ```csharp
     Vehicle car = new Car(10, 50);
     car.Drive(); // Output: Car is driving
     (car as IFuel).Refuel(20); // Output: Car is refueled

     Vehicle motorcycle = new Motorcycle(5, 15);
     motorcycle.Drive(); // Output: Motorcycle is driving
     (motorcycle as IFuel).Refuel(10); // Output: Motorcycle is refueled
     ```


using System;

interface IFuel
{
    void Refuel(decimal amount);
}

abstract class Vehicle : IFuel
{
    public abstract void Drive();

    public abstract void Refuel(decimal amount);
}

class Car : Vehicle
{
    public decimal FuelLevel { get; set; }
    public decimal TankCapacity { get; set; }

    public Car(decimal fuelLevel, decimal tankCapacity)
    {
        FuelLevel = fuelLevel;
        TankCapacity = tankCapacity;
    }

    public override void Drive()
    {
        Console.WriteLine("Car is driving");
    }

    public override void Refuel(decimal amount)
    {
        FuelLevel = Math.Min(FuelLevel + amount, TankCapacity);
        Console.WriteLine("Car is refueled");
    }
}

class Motorcycle : Vehicle
{
    public decimal FuelLevel { get; set; }
    public decimal TankCapacity { get; set; }

    public Motorcycle(decimal fuelLevel, decimal tankCapacity)
    {
        FuelLevel = fuelLevel;
        TankCapacity = tankCapacity;
    }

    public override void Drive()
    {
        Console.WriteLine("Motorcycle is driving");
    }

    public override void Refuel(decimal amount)
    {
        FuelLevel = Math.Min(FuelLevel + amount, TankCapacity);
        Console.WriteLine("Motorcycle is refueled");
    }
}

class Program
{
    static void Main()
    {
        Vehicle car = new Car(10, 50);
        car.Drive(); // Output: Car is driving
        car.Refuel(20); // Output: Car is refueled

        Vehicle motorcycle = new Motorcycle(5, 15);
        motorcycle.Drive(); // Output: Motorcycle is driving
        motorcycle.Refuel(10); // Output: Motorcycle is refueled
    }
}
---------------------------------------------------------------------------------------------------------------------------------------
5. Implement a Class Hierarchy with Method Overriding and Interfaces
   - Task: Create an interface `IIdentifiable` with a method `GetId()`. Create an abstract class `Document` that implements `IIdentifiable` and has a method `Print()`. Derive classes `Invoice` and `Receipt` from `Document`.
   - Requirements:
     - `Invoice` should have properties `InvoiceNumber` and `Amount`. Implement the `GetId()` method to return the invoice number and `Print()` to print invoice details.
     - `Receipt` should have properties `ReceiptNumber` and `TotalAmount`. Implement the `GetId()` method to return the receipt number and `Print()` to print receipt details.
   - Example:
     ```csharp
     Document invoice = new Invoice("INV001", 1000);
     Console.WriteLine(invoice.GetId()); // Output: INV001
     invoice.Print(); // Output: Invoice details

     Document receipt = new Receipt("REC001", 200);
     Console.WriteLine(receipt.GetId()); // Output: REC001
     receipt.Print(); // Output: Receipt details
     ```

using System;

interface IIdentifiable
{
    string GetId();
}

abstract class Document : IIdentifiable
{
    public abstract string GetId();
    public abstract void Print();
}

class Invoice : Document
{
    public string InvoiceNumber { get; set; }
    public decimal Amount { get; set; }

    public Invoice(string invoiceNumber, decimal amount)
    {
        InvoiceNumber = invoiceNumber;
        Amount = amount;
    }

    public override string GetId()
    {
        return InvoiceNumber;
    }

    public override void Print()
    {
        Console.WriteLine($"Invoice Number: {InvoiceNumber}, Amount: {Amount}");
    }
}

class Receipt : Document
{
    public string ReceiptNumber { get; set; }
    public decimal TotalAmount { get; set; }

    public Receipt(string receiptNumber, decimal totalAmount)
    {
        ReceiptNumber = receiptNumber;
        TotalAmount = totalAmount;
    }

    public override string GetId()
    {
        return ReceiptNumber;
    }

    public override void Print()
    {
        Console.WriteLine($"Receipt Number: {ReceiptNumber}, Total Amount: {TotalAmount}");
    }
}

class Program
{
    static void Main()
    {
        Document invoice = new Invoice("INV001", 1000);
        Console.WriteLine(invoice.GetId()); // Output: INV001
        invoice.Print(); // Output: Invoice Number: INV001, Amount: 1000

        Document receipt = new Receipt("REC001", 200);
        Console.WriteLine(receipt.GetId()); // Output: REC001
        receipt.Print(); // Output: Receipt Number: REC001, Total Amount: 200
    }
}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
