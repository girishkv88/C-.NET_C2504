create database testdb;
use testdb;

--question 1
--Find the Average Salary by Department
--Problem: Given an `Employees` table
--with columns `EmployeeID`, `DepartmentID`, and `Salary`,
--find the average salary for each department.


CREATE TABLE Employees (
EmployeeID INT,
DepartmentID INT,
Salary DECIMAL(10, 2)
);

INSERT INTO Employees (EmployeeID, DepartmentID, Salary)
VALUES (1, 102, 75000.00);
INSERT INTO Employees (EmployeeID, DepartmentID, Salary)
VALUES 
(2, 102, 65000.00),
(3, 103, 85000.00),
(4, 104, 90000.00);


SELECT 
    DepartmentID, 
    AVG(Salary) AS AverageSalary
FROM 
    Employees
GROUP BY 
    DepartmentID;

OUTPUT:
    DepartmentID	    AverageSalary
    102                	70000.000000
    103                	85000.000000
    104	                90000.000000

--Question 2
--Find Departments with No Employees
--Problem: Given a `Departments` table and an `Employees` table,
--find departments that do not have any employees.

create database testdb1;
use testdb1;

CREATE TABLE Departments (
DepartmentID INT,
DepartmentName VARCHAR(100)
);

CREATE TABLE Employees (
EmployeeID INT,
DepartmentID INT
);

INSERT INTO Departments (DepartmentID, DepartmentName)
VALUES
(1, 'Sales'),
(2, 'Marketing'),
(3, 'Finance'),
(4, 'HR');
INSERT INTO Employees (EmployeeID, DepartmentID)
VALUES
(1, 1),
(2, 1),
(3, 3);

SELECT 
    D.DepartmentID, 
    D.DepartmentName
FROM 
    Departments D
LEFT JOIN 
    Employees E ON D.DepartmentID = E.DepartmentID
WHERE 
    E.EmployeeID IS NULL;

OUTPUT:   
DepartmentID	DepartmentName
2	            Marketing
4	            HR
    
--Question 3
--Find Customers with Multiple Orders
--Problem: Given a `Customers` table and an `Orders` table
--where `Orders` contains a `CustomerID`,
--find customers who have placed more than one order.

CREATE TABLE Customers (
CustomerID INT,
Name VARCHAR(100)
);

CREATE TABLE Orders (
OrderID INT,
CustomerID INT,
OrderDate DATE
);

INSERT INTO Customers (CustomerID, Name)
VALUES
(1, 'Alice Johnson'),
(2, 'Bob Smith'),
(3, 'Carol Brown'),
(4, 'David Wilson');
INSERT INTO Orders (OrderID, CustomerID, OrderDate)
VALUES
(1, 1, '2024-08-01'),
(2, 1, '2024-08-05'),
(3, 2, '2024-08-02'),
(4, 3, '2024-08-03'),
(5, 3, '2024-08-06'),
(6, 3, '2024-08-07');

SELECT 
    C.CustomerID, 
    C.Name
FROM 
    Customers C
JOIN 
    Orders O ON C.CustomerID = O.CustomerID
GROUP BY 
    C.CustomerID, C.Name
HAVING 
    COUNT(O.OrderID) > 1;

OUTPUT :
    CustomerID	Name
        1	    Alice Johnson
        3	    Carol Brown
--question 4
--Find the Oldest and Youngest Employees
--Problem: Given an `Employees` table
--with columns `EmployeeID`, `Name`, and `DateOfBirth`,
--find the oldest and youngest employees.


create database testdb2;
use testdb2;

CREATE TABLE Employees (
    EmployeeID INT,
    Name VARCHAR(100),
    DateOfBirth DATE
);
INSERT INTO Employees (EmployeeID, Name, DateOfBirth)
VALUES
(1, 'Alice Johnson', '1980-05-15'),
(2, 'Bob Smith', '1990-12-01'),
(3, 'Carol Brown', '1975-07-30'),
(4, 'David Wilson', '1985-03-22');
-- Finding the Oldest Employee

SELECT 
    EmployeeID, 
    Name, 
    DateOfBirth
FROM 
    Employees
WHERE 
    DateOfBirth = (SELECT MIN(DateOfBirth) FROM Employees);

-- Finding the Youngest Employee
SELECT 
    EmployeeID, 
    Name, 
    DateOfBirth
FROM 
    Employees
WHERE 
    DateOfBirth = (SELECT MAX(DateOfBirth) FROM Employees);

*****
    SELECT 
    EmployeeID, 
    Name, 
    DateOfBirth 
FROM 
    Employees
WHERE 
    DateOfBirth = (SELECT MIN(DateOfBirth) FROM Employees) OR 
    DateOfBirth = (SELECT MAX(DateOfBirth) FROM Employees);

***
SELECT 
    EmployeeID, 
    Name, 
    DateOfBirth 
FROM 
    Employees
WHERE 
    DateOfBirth IN ((SELECT MIN(DateOfBirth) FROM Employees ),
   (SELECT MAX(DateOfBirth) FROM Employees));

***
SELECT 
    EmployeeID, 
    Name, 
    DateOfBirth 
FROM 
    Employees
WHERE 
    DateOfBirth = (SELECT MIN(DateOfBirth) FROM Employees) UNION
SELECT 
    EmployeeID, 
    Name, 
    DateOfBirth
FROM 
    Employees
WHERE 
    DateOfBirth = (SELECT MAX(DateOfBirth) FROM Employees);

OUTPUT :
EmployeeID	Name	    DateOfBirth
2	        Bob Smith	1990-12-01
3	        Carol Brown	1975-07-30
    
--Question 5
--Find the Total Number of Orders and Total Order Value by Customer
--Problem: Given an `Orders` table,
--find the total number of orders and
--total order value for each customer.

CREATE TABLE Orders (
    OrderID INT,
    CustomerID INT,
    OrderDate DATE,
    OrderValue DECIMAL(10, 2)
);

INSERT INTO Orders (OrderID, CustomerID, OrderDate, OrderValue)
VALUES
(1, 1, '2024-08-01', 150.00),
(2, 1, '2024-08-05', 200.00),
(3, 2, '2024-08-02', 75.00),
(4, 3, '2024-08-03', 120.00),
(5, 3, '2024-08-06', 180.00),
(6, 3, '2024-08-07', 90.00);


SELECT 
    CustomerID, 
    COUNT(OrderID) AS TotalOrders, 
    SUM(OrderValue) AS TotalOrderValue
FROM 
    Orders
GROUP BY 
    CustomerID;

OUTPUT:
CustomerID	 TotalOrders	TotalOrderValue
1	            2	            350.00
2	            1	            75.00
3	            3	            390.00
    
