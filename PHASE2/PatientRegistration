To build your Patient Admission application in WPF with MVVM, hereâ€™s an outline based on the requirements:

1. Interface for ViewModel Inheritance (IPatient.cs)

Define an interface to ensure consistency and enforce the necessary methods in the ViewModel.

public interface IPatient
{
    void RegisterPatient(PatientModel patient);
    void UpdateAppointmentStatus(PatientModel patient, string status);
    IList<PatientModel> GetRegisteredPatients();
}

2. Model Class (PatientModel.cs)

Ensure the PatientModel includes necessary properties and uses an ObservableCollection or IList for temporary data storage.

public class PatientModel
{
    public string Name { get; set; }
    public int Age { get; set; }
    public DateTime DateOfBirth { get; set; }
    public string Address { get; set; }
    public string Slot { get; set; }
    public DateTime BookingDate { get; set; }
    public DateTime AppointmentDate { get; set; }
    public string ConfirmationStatus { get; set; }
}

3. ViewModel Class (PatientViewModel.cs)

Implement the interface in PatientViewModel, using an ObservableCollection to temporarily store data and events to update the patient dashboard.

public class PatientViewModel : IPatient
{
    public ObservableCollection<PatientModel> Patients { get; private set; } = new ObservableCollection<PatientModel>();

    public void RegisterPatient(PatientModel patient)
    {
        Patients.Add(patient);
        OnPatientRegistered(new PatientEventArgs(patient));
    }

    public void UpdateAppointmentStatus(PatientModel patient, string status)
    {
        patient.ConfirmationStatus = status;
        OnAppointmentUpdated(new PatientEventArgs(patient));
    }

    public IList<PatientModel> GetRegisteredPatients()
    {
        return Patients.ToList();
    }

    // Event to notify the dashboard of updates
    public event EventHandler<PatientEventArgs> PatientRegistered;
    public event EventHandler<PatientEventArgs> AppointmentUpdated;

    protected virtual void OnPatientRegistered(PatientEventArgs e)
    {
        PatientRegistered?.Invoke(this, e);
    }

    protected virtual void OnAppointmentUpdated(PatientEventArgs e)
    {
        AppointmentUpdated?.Invoke(this, e);
    }
}

4. Events for Notifications (PatientEventArgs.cs)

Define PatientEventArgs to carry patient data through events.

public class PatientEventArgs : EventArgs
{
    public PatientModel Patient { get; }

    public PatientEventArgs(PatientModel patient)
    {
        Patient = patient;
    }
}

5. XAML Updates for Main Window (MainWindow.xaml)

Bind buttons to commands and data to ViewModel in XAML.

<Window x:Class="PatientAdmissionApp.MainWindow"
        ...
        DataContext="{StaticResource PatientViewModel}">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- Navigation Buttons -->
        <StackPanel Grid.Column="0" Margin="20">
            <Button Content="Patient Registration" Command="{Binding ShowRegistrationCommand}" Width="160" Height="40" Margin="0,10"/>
            <Button Content="Appointment Confirmation" Command="{Binding ShowAppointmentCommand}" Width="160" Height="40" Margin="0,10"/>
            <Button Content="Patient Dashboard" Command="{Binding ShowDashboardCommand}" Width="160" Height="40" Margin="0,10"/>
            <Button Content="Exit" Command="{Binding ExitCommand}" Width="160" Height="40" Margin="0,10"/>
        </StackPanel>

        <!-- Content Display -->
        <ContentControl Content="{Binding CurrentView}" Grid.Column="1" Margin="20"/>
    </Grid>
</Window>

6. Commands for Navigation in ViewModel

Define commands to switch views based on navigation button clicks.

public ICommand ShowRegistrationCommand { get; }
public ICommand ShowAppointmentCommand { get; }
public ICommand ShowDashboardCommand { get; }
public ICommand ExitCommand { get; }

public PatientViewModel()
{
    ShowRegistrationCommand = new RelayCommand(_ => CurrentView = new PatientRegistrationControl());
    ShowAppointmentCommand = new RelayCommand(_ => CurrentView = new AppointmentControl());
    ShowDashboardCommand = new RelayCommand(_ => CurrentView = new PatientDashboardControl());
    ExitCommand = new RelayCommand(_ => Application.Current.Shutdown());
}

This structure will allow you to effectively implement each requirement, utilize ObservableCollection for data-binding, and use LINQ for filtering/sorting in your MVVM setup.

