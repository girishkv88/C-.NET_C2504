 <Grid>
     <StackPanel Margin="20">
         <TextBlock Text="Patient Registration" FontSize="20" FontWeight="Bold" />
         
         <TextBlock Text="Name"  />
         <TextBox x:Name="NameTextBox"  />

         <TextBlock Text="Age"/>
         <TextBox x:Name="AgeTextBox"/>
         
         <TextBlock Text="Date of Birth:" />
         <DatePicker x:Name="DOBPicker"  SelectedDateFormat="Short"  DisplayDateEnd="{x:Static sys:DateTime.Now}"/>

         <TextBlock Text="Address:" />
         <TextBox x:Name="AddressTextBox" />
         <TextBlock Text="Slot:" />
         <ComboBox x:Name="SlotComboBox" >
             <ComboBoxItem Content="Morning"  />
             <ComboBoxItem Content="Evening" />
         </ComboBox>

         <TextBlock Text="Booking Date:" />
         <DatePicker x:Name="BookingDatePicker" SelectedDateFormat="Short" DisplayDateStart="{x:Static sys:DateTime.Now}"/>
         
         <Button x:Name="btnRegister" Content="Register" Width="100" Height="30" Margin="0,10,0,0" Click="btnRegister_Click" />
     </StackPanel>
 </Grid>






using System;
using System.Collections.ObjectModel;
using System.Windows;
using System.Windows.Input;

namespace PatientAdmissionApp
{
    public class PatientViewModel : BaseViewModel, Ipatient
    {
        public event EventHandler AppointmentUpdated;
        public event EventHandler Exited;
        public event EventHandler PatientRegistered;

        public ObservableCollection<PatientModel> Patients { get; set; } = new ObservableCollection<PatientModel>();
        public ObservableCollection<PatientModel> ConfirmedPatients { get; set; } = new ObservableCollection<PatientModel>();

        private PatientModel _newPatient;
        public PatientModel NewPatient
        {
            get { return _newPatient; }
            set { _newPatient = value; OnPropertyChanged(); }
        }

        private PatientModel _selectedPatient;
        public PatientModel SelectedPatient
        {
            get { return _selectedPatient; }
            set { _selectedPatient = value; OnPropertyChanged(); }
        }

        private bool _selectedSlot;
        public bool SelectedSlot
        {
            get { return _selectedSlot; }
            set { _selectedSlot = value; OnPropertyChanged(nameof(SelectedSlot)); }
        }

        public ICommand RegisterPatientCommand { get; set; }
        public ICommand SendUpdateCommand { get; set; }

        public PatientViewModel()
        {
            NewPatient = new PatientModel();

            RegisterPatientCommand = new RelayCommand(RegisterPatient);
            SendUpdateCommand = new RelayCommand(SendUpdate);

            PatientRegistered += OnPatientRegistered;
            AppointmentUpdated += OnAppointmentUpdated;
        }

        public void RegisterPatient(object parameter)
        {

            if (!string.IsNullOrEmpty(NewPatient.Name) && NewPatient.Dateofbirth != default)
            {
                Patients.Add(new PatientModel
                {
                    Name = NewPatient.Name,
                    Dateofbirth = NewPatient.Dateofbirth,
                    Age = DateTime.Now.Year - NewPatient.Dateofbirth.Year,
                    Address = NewPatient.Address,
                    Slot = NewPatient.Slot,
                    BookingDate = NewPatient.BookingDate
                });
                PatientRegistered?.Invoke(this, EventArgs.Empty);



                NewPatient = new PatientModel();
            }
            else
            {
                MessageBox.Show("Please provide valid patient details.");
            }
        }

        private void OnPatientRegistered(object sender, EventArgs e)
        {
            MessageBox.Show("Registration Success!!!!");

        }

        public void SendUpdate(object parameter)
        {
            if (SelectedPatient != null)
            {
                SelectedPatient.ConfirmationStatus = NewPatient.ConfirmationStatus;
                SelectedPatient.AppointmentDate = NewPatient.AppointmentDate;
                AppointmentUpdated?.Invoke(this, EventArgs.Empty);

            }
            else
            {
                MessageBox.Show("Please select a Patient");
            }
        }

        private void OnAppointmentUpdated(object sender, EventArgs e)
        {
            if (SelectedPatient != null && !ConfirmedPatients.Contains(SelectedPatient))
            {
                ConfirmedPatients.Add(SelectedPatient);

                MessageBox.Show($"Appointment {NewPatient.ConfirmationStatus} for {SelectedPatient.Name}");

                MessageBox.Show($"Appointment Confirmed for {SelectedPatient.Name}");

            }
        }


        public virtual void OnExited()
        {
            Application.Current.Shutdown();
            Exited?.Invoke(this, EventArgs.Empty);
        }
    }
}
























To bind a combo box with values like "Morning" and "Evening" to a boolean Slot property in your Patient model, you can use a BooleanToStringConverter. This converter will handle the transformation between the boolean Slot value and the "Morning"/"Evening" text in the combo box.

Here’s the complete setup:

1. Create the BooleanToStringConverter

This converter will convert true to "Morning" and false to "Evening".

using System;
using System.Globalization;
using System.Windows.Data;

namespace PatientAdmissionApp.Converters
{
    public class BooleanToStringConverter : IValueConverter
    {
        public object Convert(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is bool boolValue)
            {
                return boolValue ? "Morning" : "Evening";
            }
            return "Evening"; // Default if not bool
        }

        public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture)
        {
            if (value is string stringValue)
            {
                return stringValue == "Morning";
            }
            return false; // Default if not "Morning"
        }
    }
}

2. Register the Converter in XAML

To use the converter, add it as a resource in your XAML file. Register the namespace for Converters in your XAML, and then define the converter as a resource.

XAML Code (for Main Window or relevant UserControl)

<Window x:Class="PatientAdmissionApp.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:local="clr-namespace:PatientAdmissionApp"
        xmlns:conv="clr-namespace:PatientAdmissionApp.Converters"
        Title="Patient Admission" Height="450" Width="800">

    <Window.Resources>
        <conv:BooleanToStringConverter x:Key="BooleanToStringConverter" />
    </Window.Resources>
    
    <Grid>
        <!-- ComboBox Code and Other UI Components -->
    </Grid>
</Window>

3. Bind the ComboBox in XAML

Bind your combo box to the Slot property in the Patient model using the BooleanToStringConverter.

ComboBox XAML Code

<ComboBox x:Name="SlotComboBox" Width="150" Height="30" 
          SelectedValue="{Binding Slot, Mode=TwoWay, Converter={StaticResource BooleanToStringConverter}}">
    <ComboBoxItem Content="Morning" />
    <ComboBoxItem Content="Evening" />
</ComboBox>

4. Patient Model

Ensure the Patient class has the Slot property defined as a boolean.

public class Patient
{
    public string Name { get; set; }
    public int Age { get; set; }
    public DateTime DateOfBirth { get; set; }
    public string Address { get; set; }
    
    // Slot property as boolean: true for "Morning", false for "Evening"
    public bool Slot { get; set; }
}

5. ViewModel Property (Optional)

If you’re binding through a ViewModel, make sure the Slot property is exposed there, and set up INotifyPropertyChanged if necessary.

private bool _slot;
public bool Slot
{
    get => _slot;
    set
    {
        if (_slot != value)
        {
            _slot = value;
            OnPropertyChanged(nameof(Slot));
        }
    }
}

Explanation

The BooleanToStringConverter maps true to "Morning" and false to "Evening" in Convert.

In ConvertBack, it converts "Morning" back to true and anything else (like "Evening") to false.

The combo box binds to the Slot property in your model, and the converter handles the necessary conversions automatically.




















To build your Patient Admission application in WPF with MVVM, here’s an outline based on the requirements:

1. Interface for ViewModel Inheritance (IPatient.cs)

Define an interface to ensure consistency and enforce the necessary methods in the ViewModel.

public interface IPatient
{
    void RegisterPatient(PatientModel patient);
    void UpdateAppointmentStatus(PatientModel patient, string status);
    IList<PatientModel> GetRegisteredPatients();
}

2. Model Class (PatientModel.cs)

Ensure the PatientModel includes necessary properties and uses an ObservableCollection or IList for temporary data storage.

public class PatientModel
{
    public string Name { get; set; }
    public int Age { get; set; }
    public DateTime DateOfBirth { get; set; }
    public string Address { get; set; }
    public string Slot { get; set; }
    public DateTime BookingDate { get; set; }
    public DateTime AppointmentDate { get; set; }
    public string ConfirmationStatus { get; set; }
}

3. ViewModel Class (PatientViewModel.cs)

Implement the interface in PatientViewModel, using an ObservableCollection to temporarily store data and events to update the patient dashboard.

public class PatientViewModel : IPatient
{
    public ObservableCollection<PatientModel> Patients { get; private set; } = new ObservableCollection<PatientModel>();

    public void RegisterPatient(PatientModel patient)
    {
        Patients.Add(patient);
        OnPatientRegistered(new PatientEventArgs(patient));
    }

    public void UpdateAppointmentStatus(PatientModel patient, string status)
    {
        patient.ConfirmationStatus = status;
        OnAppointmentUpdated(new PatientEventArgs(patient));
    }

    public IList<PatientModel> GetRegisteredPatients()
    {
        return Patients.ToList();
    }

    // Event to notify the dashboard of updates
    public event EventHandler<PatientEventArgs> PatientRegistered;
    public event EventHandler<PatientEventArgs> AppointmentUpdated;

    protected virtual void OnPatientRegistered(PatientEventArgs e)
    {
        PatientRegistered?.Invoke(this, e);
    }

    protected virtual void OnAppointmentUpdated(PatientEventArgs e)
    {
        AppointmentUpdated?.Invoke(this, e);
    }
}

4. Events for Notifications (PatientEventArgs.cs)

Define PatientEventArgs to carry patient data through events.

public class PatientEventArgs : EventArgs
{
    public PatientModel Patient { get; }

    public PatientEventArgs(PatientModel patient)
    {
        Patient = patient;
    }
}

5. XAML Updates for Main Window (MainWindow.xaml)

Bind buttons to commands and data to ViewModel in XAML.

<Window x:Class="PatientAdmissionApp.MainWindow"
        ...
        DataContext="{StaticResource PatientViewModel}">
    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="200" />
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <!-- Navigation Buttons -->
        <StackPanel Grid.Column="0" Margin="20">
            <Button Content="Patient Registration" Command="{Binding ShowRegistrationCommand}" Width="160" Height="40" Margin="0,10"/>
            <Button Content="Appointment Confirmation" Command="{Binding ShowAppointmentCommand}" Width="160" Height="40" Margin="0,10"/>
            <Button Content="Patient Dashboard" Command="{Binding ShowDashboardCommand}" Width="160" Height="40" Margin="0,10"/>
            <Button Content="Exit" Command="{Binding ExitCommand}" Width="160" Height="40" Margin="0,10"/>
        </StackPanel>

        <!-- Content Display -->
        <ContentControl Content="{Binding CurrentView}" Grid.Column="1" Margin="20"/>
    </Grid>
</Window>

6. Commands for Navigation in ViewModel

Define commands to switch views based on navigation button clicks.

public ICommand ShowRegistrationCommand { get; }
public ICommand ShowAppointmentCommand { get; }
public ICommand ShowDashboardCommand { get; }
public ICommand ExitCommand { get; }

public PatientViewModel()
{
    ShowRegistrationCommand = new RelayCommand(_ => CurrentView = new PatientRegistrationControl());
    ShowAppointmentCommand = new RelayCommand(_ => CurrentView = new AppointmentControl());
    ShowDashboardCommand = new RelayCommand(_ => CurrentView = new PatientDashboardControl());
    ExitCommand = new RelayCommand(_ => Application.Current.Shutdown());
}

This structure will allow you to effectively implement each requirement, utilize ObservableCollection for data-binding, and use LINQ for filtering/sorting in your MVVM setup.

