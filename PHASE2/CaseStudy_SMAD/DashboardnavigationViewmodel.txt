Step 1: Create a ViewModel
Create a HomePageViewModel that will handle the navigation logic. The INotifyPropertyChanged interface will be used to notify the UI of property changes.

HomePageViewModel.cs:

csharp
Copy code
using System.Windows;
using System.Windows.Input;

namespace SMAD
{
    public class HomePageViewModel : INotifyPropertyChanged
    {
        private object _currentView;

        public HomePageViewModel()
        {
            CurrentView = new HomePage(); // Set the initial view
            NavigateCommand = new RelayCommand<string>(Navigate);
        }

        public object CurrentView
        {
            get => _currentView;
            set
            {
                _currentView = value;
                OnPropertyChanged(nameof(CurrentView));
            }
        }

        public ICommand NavigateCommand { get; }

        private void Navigate(string viewName)
        {
            switch (viewName)
            {
                case "Home":
                    CurrentView = new HomePage();
                    break;
                case "Alerts":
                    CurrentView = new AlertAndNotificationWindow();
                    break;
                case "UserManagement":
                    CurrentView = new UserManagementWindow();
                    break;
                // Add more cases as needed
                default:
                    CurrentView = new HomePage();
                    break;
            }
        }

        public event PropertyChangedEventHandler PropertyChanged;
        protected void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }
    }
}
Step 2: Create a RelayCommand
Youâ€™ll also need a simple RelayCommand class to bind commands to buttons.

RelayCommand.cs:

csharp
Copy code
using System;
using System.Windows.Input;

namespace SMAD
{
    public class RelayCommand<T> : ICommand
    {
        private readonly Action<T> _execute;
        private readonly Func<T, bool> _canExecute;

        public RelayCommand(Action<T> execute, Func<T, bool> canExecute = null)
        {
            _execute = execute ?? throw new ArgumentNullException(nameof(execute));
            _canExecute = canExecute;
        }

        public bool CanExecute(object parameter) => _canExecute == null || _canExecute((T)parameter);

        public void Execute(object parameter) => _execute((T)parameter);

        public event EventHandler CanExecuteChanged
        {
            add { CommandManager.RequerySuggested += value; }
            remove { CommandManager.RequerySuggested -= value; }
        }
    }
}
Step 3: Update HomePageDashboard.xaml
In your HomePageDashboard.xaml, bind the Frame's content to the CurrentView property of your ViewModel. Use commands to navigate:

xml
Copy code
<Window x:Class="SMAD.HomePageDashboard"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Home Dashboard" Height="600" Width="800">
    <Window.DataContext>
        <local:HomePageViewModel/>
    </Window.DataContext>
    
    <Grid Background="{StaticResource WindowBackground}">
        <StackPanel Orientation="Vertical" Width="200" Background="#2C3E50">
            <Button Content="Home" Style="{StaticResource NavButtonStyle}" 
                    Command="{Binding NavigateCommand}" CommandParameter="Home"/>
            <Button Content="Alerts and Notifications" Style="{StaticResource NavButtonStyle}" 
                    Command="{Binding NavigateCommand}" CommandParameter="Alerts"/>
            <Button Content="User Management" Style="{StaticResource NavButtonStyle}" 
                    Command="{Binding NavigateCommand}" CommandParameter="UserManagement"/>
            <!-- Add other navigation buttons as needed -->
        </StackPanel>

        <Frame Name="MainFrame" NavigationUIVisibility="Hidden" 
               Margin="200,0,0,0" Content="{Binding CurrentView}"/>
    </Grid>
</Window>
Step 4: Update HomePageDashboard.xaml.cs
You can remove the code-behind for button click events since navigation is now handled in the ViewModel:

csharp
Copy code
using System.Windows;

namespace SMAD
{
    public partial class HomePageDashboard : Window
    {
        public HomePageDashboard()
        {
            InitializeComponent();
        }
    }
}
