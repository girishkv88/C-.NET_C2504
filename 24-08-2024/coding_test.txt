****************************************************************************************************************
Question 21
****************************************************************************************************************
Problem Statement: Prescription Cost Management
- Define a class: `PrescriptionCost` with the following properties:
- `PrescriptionID` (integer)
- `PatientName` (string)
- `Medication` (string)
- `Cost` (double, in dollars)
- Tasks:
1. Data Input:
- Read N `prescriptionCosts` from the keyboard.
2. Find Lowest Cost Prescription:
- Display the prescription with the lowest cost.
Solve in time complexity of O(N).
Dont use built-in C# sorting or LINQ.
3. Find Second Highest Cost Prescription:
- Display the prescription with the second highest cost.
Solve in time complexity of O(N).
Dont use built-in C# sorting or LINQ.
4. Sort by Medication Name:
- Implement and call your own sorting algorithm.
Dont use built-in C# sorting or LINQ.
***********************************************************

using System;

namespace ConsoleApp2
{
    public class PrescriptionCost
    {
        public int PrescriptionID { get; set; }
        public string PatientName { get; set; }
        public string Medication { get; set; }
        public double Cost { get; set; }
        public override string ToString()
        {
            return $"PrescriptionID: {PrescriptionID}, PatientName: {PatientName}, Medication: {Medication}, Cost: ${Cost:F2}";
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Console.Write("Enter the number of prescriptions: ");
            int N = int.Parse(Console.ReadLine());

            PrescriptionCost[] prescriptionCosts = new PrescriptionCost[N];

            for (int i = 0; i < N; i++)
            {
                Console.WriteLine($"Enter details for prescription {i + 1}:");
                
                Console.Write("PrescriptionID: ");
                int id = int.Parse(Console.ReadLine());

                Console.Write("Patient Name: ");
                string patientName = Console.ReadLine();

                Console.Write("Medication: ");
                string medication = Console.ReadLine();

                Console.Write("Cost: ");
                double cost = double.Parse(Console.ReadLine());

                prescriptionCosts[i] = new PrescriptionCost
                {
                    PrescriptionID = id,
                    PatientName = patientName,
                    Medication = medication,
                    Cost = cost
                };
            }

          
            PrescriptionCost lowestCostPrescription = FindLowestCostPrescription(prescriptionCosts);
            Console.WriteLine("\nPrescription with the lowest cost:");
            Console.WriteLine(lowestCostPrescription);

            
            PrescriptionCost secondHighestCostPrescription = FindSecondHighestCostPrescription(prescriptionCosts);
            Console.WriteLine("\nPrescription with the second highest cost:");
            Console.WriteLine(secondHighestCostPrescription);

            
            SortByMedicationName(prescriptionCosts);
            Console.WriteLine("\nPrescriptions sorted by medication name:");
            foreach (var prescription in prescriptionCosts)
            {
                Console.WriteLine(prescription);
            }
        }

        
        static PrescriptionCost FindLowestCostPrescription(PrescriptionCost[] prescriptions)
        {
            PrescriptionCost lowestCostPrescription = prescriptions[0];

            for (int i = 1; i < prescriptions.Length; i++)
            {
                if (prescriptions[i].Cost < lowestCostPrescription.Cost)
                {
                    lowestCostPrescription = prescriptions[i];
                }
            }

            return lowestCostPrescription;
        }

        static PrescriptionCost FindSecondHighestCostPrescription(PrescriptionCost[] prescriptions)
        {
            if (prescriptions.Length < 2)
            {
                Console.WriteLine("At least two prescriptions are required to find the second highest cost.");
            }

            PrescriptionCost highestCost = prescriptions[0];
            PrescriptionCost secondHighestCost = null;

           
            for (int i = 1; i < prescriptions.Length; i++)
            {
                if (prescriptions[i].Cost > highestCost.Cost)
                {
                    secondHighestCost = highestCost;
                    highestCost = prescriptions[i];
                }
                else if (secondHighestCost == null || prescriptions[i].Cost > secondHighestCost.Cost)
                {
                    secondHighestCost = prescriptions[i];
                }
            }

            return secondHighestCost;
        }

    
        static void SortByMedicationName(PrescriptionCost[] prescriptions)
        {
            int n = prescriptions.Length;
            for (int i = 0; i < n - 1; i++)
            {
                int minIndex = i;
                for (int j = i + 1; j < n; j++)
                {
                    if (string.Compare(prescriptions[j].Medication, prescriptions[minIndex].Medication, StringComparison.Ordinal) < 0)
                    {
                        minIndex = j;
                    }
                }

                if (minIndex != i)
                {
                
                    PrescriptionCost temp = prescriptions[i];
                    prescriptions[i] = prescriptions[minIndex];
                    prescriptions[minIndex] = temp;
                }
            }
        }
    }
}



****************************************************************************************************************

Question 22
****************************************************************************************************************
Problem Statement: Advanced Inheritance and Interface in Patient Care System
- Define a base class: `CareProvider` with properties:
- `ProviderID` (integer), `ProviderName` (string)
- Method: `ProvideCare()` (virtual, void)
- Define an interface: `IEmergencyResponder` with the following method:
- `RespondToEmergency()` (void)
- Define a derived class: `Nurse` that inherits from `CareProvider` and implements `IEmergencyResponder`:
- Additional Property: `ShiftTiming` (string)
- Implement `ProvideCare()` to display care provided during the shift.
- Implement `RespondToEmergency()` to handle emergency situations.
- Define another derived class: `Doctor` that also inherits from `CareProvider` and implements `IEmergencyResponder`:
- Additional Property: `Specialization` (string)
- Implement `ProvideCare()` to display care based on specialization.
- Implement `RespondToEmergency()` to handle critical emergency situations.
- Tasks:
1. Care Management:
- Read details for N `careProviders` (both Nurses and Doctors).
2. Emergency Response:
- Implement a method to simulate an emergency and call `RespondToEmergency()` for each care provider.
3. Care Providing:
- Display details of care provided by each provider using the overridden `ProvideCare()` method.

***************************************
using System;


namespace ConsoleApp2
{
    public class CareProvider
    {
        public int ProviderID { get; set; }
        public string ProviderName { get; set; }

        public virtual void ProvideCare()
        {
            Console.WriteLine($"CareProvider {ProviderName} is providing care.");
        }
    }

    public interface IEmergencyResponder
    {
        void RespondToEmergency();
    }

    public class Nurse : CareProvider, IEmergencyResponder
    {
        public string ShiftTiming { get; set; }
        public override void ProvideCare()
        {
            Console.WriteLine($"Nurse {ProviderName} is providing care during {ShiftTiming} shift.");
        }

        public void RespondToEmergency()
        {
            Console.WriteLine($"Nurse {ProviderName} is handling an emergency!");
        }
    }

    public class Doctor : CareProvider, IEmergencyResponder
    {
        public string Specialization { get; set; }

        public override void ProvideCare()
        {
            Console.WriteLine($"Doctor {ProviderName} with specialization in {Specialization} is providing care.");
        }

        public void RespondToEmergency()
        {
            Console.WriteLine($"Doctor {ProviderName} with specialization in {Specialization} is Handling a critical emergency!");
        }
    }

    class Program2
    {
        static void Main(string[] args)
        {
            Console.Write("Enter the number of care providers: ");
            int N = int.Parse(Console.ReadLine());

            CareProvider[] careProviders = new CareProvider[N];

   
            for (int i = 0; i < N; i++)
            {
                Console.WriteLine($"\nEnter details for care provider {i + 1}:");

                Console.Write("Is the provider a Nurse or Doctor? (Enter 'N' for Nurse, 'D' for Doctor): ");
                char providerType = char.ToUpper(Console.ReadLine()[0]);

                Console.Write("Enter ProviderID: ");
                int providerID = int.Parse(Console.ReadLine());

                Console.Write("Enter ProviderName: ");
                string providerName = Console.ReadLine();

                if (providerType == 'N')
                {
                    Console.Write("Enter ShiftTiming: ");
                    string shiftTiming = Console.ReadLine();

                    Nurse nurse = new Nurse
                    {
                        ProviderID = providerID,
                        ProviderName = providerName,
                        ShiftTiming = shiftTiming
                    };

                    careProviders[i] = nurse;
                }
                else if (providerType == 'D')
                {
                    Console.Write("Enter Specialization: ");
                    string specialization = Console.ReadLine();

                    Doctor doctor = new Doctor
                    {
                        ProviderID = providerID,
                        ProviderName = providerName,
                        Specialization = specialization
                    };

                    careProviders[i] = doctor;
                }
                else
                {
                    Console.WriteLine("Invalid input. Please enter 'N' for Nurse or 'D' for Doctor.");
                    i--; 
                }
            }

            Console.WriteLine("\nSimulating an emergency...");
            foreach (var provider in careProviders)
            {
                if (provider is IEmergencyResponder responder)
                {
                    responder.RespondToEmergency();
                }
            }

            Console.WriteLine("\nDetails of care provided by each provider:");
            foreach (var provider in careProviders)
            {
                provider.ProvideCare();
            }
        }
    }
}




****************************************************************************************************************
