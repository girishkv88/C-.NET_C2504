
WORKING OF DELEGATES

1.using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp59
{
    public delegate void Operation(int n1, int n2);
    public delegate void Operation1(int n1, int n2,int n3);
    internal class Program
    {
        public static void Add(int a, int b) => Console.WriteLine(a + b);
        public static void Sub(int a, int b) => Console.WriteLine(a - b);
        public static void Mul(int a, int b,int c) => Console.WriteLine(a * b * c);
        static void Main(string[] args)
        {
            Operation op = Add;
            op += Sub;
            op += Sub;
            op -= Sub;
            op(10, 5);
            
            //Operation op1 = Sub;
            //op1(5, 2);
            //Operation1 op2 = Mul;
            //op2(1,2,3);

        }
    }
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
2.using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace ConsoleApp59
{
    public delegate void Operation(int n1, int n2);
    public delegate void Operation1(int n1, int n2,int n3);

    internal class Program
    {
        public static void Add(int a, int b) => Console.WriteLine(a + b);
        public static void Sub(int a, int b) => Console.WriteLine(a - b);
        public static void Mul(int a, int b,int c) => Console.WriteLine(a * b * c);

        public static bool IsEven(int x) => x % 2 == 0;
        public static void SetTimer(int delay, Operation op)
        {
            Thread.Sleep(delay);
            Console.WriteLine("Delayed message:");
            op(3,2);
        }

        static void Main(string[] args)
        {
            Operation op = Add;
            op += Sub;
            //op += Sub;
            //op -= Sub;
            op(10, 5);
            SetTimer(2000, op);
            //Operation op1 = Sub;
            //op1(5, 2);
            //Operation1 op2 = Mul;
            //op2(1,2,3);
            Action<int, int> x = Add;
            Func<int, bool> y = IsEven;
            Predicate<int> z = IsEven;
            x(4, 5);
            y(10);
            z(6);

        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
3.public static bool IsOdd(int number)
{
    return number % 2 != 0;
}
 
public static bool IsEven(int number)
{
    return number % 2 == 0;
}
 
public static void Check(int[] numbers,  Predicate<int> condition)
{
    foreach (var num in numbers)
    {
        if (condition(num))
        {
            Console.WriteLine(num);
        }
    }
}
